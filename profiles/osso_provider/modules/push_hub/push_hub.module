<?php

/**
 * @file
 *
 * @todo Support notifications from publishers over HTTP.
 */

include_once('PuSHHub.inc');

/**
 * Implementation of hook_menu().
 */
function push_hub_menu() {
  $items = array();
  $items['pubsubhubbub/endpoint'] = array(
   'page callback' => 'push_hub_endpoint',
   'page arguments' => array(3, 4),
   'access callback' => 'user_access',
   'access arguments' => array('access content'), // @todo Specific permission
   'file' => 'push_hub.pages.inc',
   'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Instantiates a PuSH Hub object.
 */
function push_hub() {
  return PuSHHub::instance(PuSHHubSubscriptions::instance());
}

/**
 * Notify subscribers.
 *
 * @param $topic
 *   URL of the topic that changed.
 * @param $changed
 *   The full or partial feed that contains the changed elements.  If NULL,
 *   a light ping (without any content) will be issued to subscriber and
 *   subscriber is expected to fetch content from publisher. Light pings are
 *   not pubsubhubbub spec conform.
 *
 * @todo Support batching, queue failing notifications for later.
 */
function push_hub_notify($topic, $changed = NULL) {
  $operations = array();
  foreach (push_hub()->allSubscribers($topic) as $subscriber) {
    $operations[] = array(
      'push_hub_notify_subscriber', array($subscriber, $changed),
    );
  }
  $batch = array(
    'title' => t('Updating account'),
    'operations' => $operations
    );
  batch_set($batch);
}

/**
 * Notify subscriber, used as Batch API callback. The absence of a $topic may
 * be confusing: A $subscriber URL is unique to a topic URL, therefore it is not
 * necessary to supply $subscriber and $topic for issueing a notification.
 *
 * @param $subscriber
 *   The subscriber for a specific topic.
 * @param $changed
 *   The content that has changed.
 * @param $context
 *   Batch API context.
 */
function push_hub_notify_subscriber($subscriber, $changed = NULL, &$context) {
  if (!push_hub()->notify($subscriber, $changed)) {
    watchdog('push_hub', 'Failed to notify @subscriber - queueing for later notification.', array('@subscriber' => $subscriber), WATCHDOG_NOTICE);
  }
  $context['finished'] = TRUE;
}

/**
 * A PuSHHub Subscriptions.
 */
class PuSHHubSubscriptions implements PuSHHubSubscriptionsInterface {
  /**
   * Singleton.
   */
  public function instance() {
    static $subscriptions;
    if (empty($subscriptions)) {
      $subscriptions = new PuSHHubSubscriptions();
    }
    return $subscriptions;
  }

  /**
   * Protect constructor.
   */
  protected function __construct() {
  }

  /**
   * Save a subscription.
   */
  public function save($topic, $subscriber) {
    $this->delete($topic, $subscriber);
    $subscription = array(
      'topic' => $topic,
      'subscriber' => $subscriber,
      'timestamp' => time(),
    );
    drupal_write_record('push_hub_subscriptions', $subscription);
  }

  /**
   * Delete a subscription.
   */
  public function delete($topic, $subscriber) {
    db_query("DELETE FROM {push_hub_subscriptions} WHERE topic = '%s' AND subscriber = '%s'", $topic, $subscriber);
  }

  /**
   * Find all subscriber URLs for a given topic URL.
   *
   * @return
   *   An array of subscriber URLs.
   */
  public function all($topic) {
    $subscribers = array();
    $result = db_query("SELECT subscriber FROM {push_hub_subscriptions} WHERE topic = '%s'", $topic);
    while ($row = db_fetch_object($result)) {
      $subscribers[] = $row->subscriber;
    }
    return $subscribers;
  }
}
